{"version":3,"sources":["authProvider.js","Dashboard.js","dataProvider.js","posts.js","MyUrlField.js","users.js","App.js","serviceWorker.js","index.js"],"names":["authProvider","type","params","AUTH_LOGIN","username","localStorage","setItem","Promise","resolve","AUTH_LOGOUT","removeItem","AUTH_ERROR","status","reject","AUTH_CHECK","getItem","Dashboard","react_default","a","createElement","Card_default","CardHeader_default","title","CardContent_default","API_URL","dataProvider","resource","fetchJson","fetchUtils","_convertDataProviderR","GET_LIST","_params$pagination","pagination","page","perPage","_params$sort","sort","field","order","query","JSON","stringify","range","filter","url","concat","GET_ONE","id","GET_MANY","ids","GET_MANY_REFERENCE","_params$pagination2","_params$sort2","Object","objectSpread","defineProperty","target","UPDATE","options","method","body","data","CREATE","DELETE","Error","convertDataProviderRequestToHTTP","then","response","headers","json","map","x","total","parseInt","get","split","pop","convertHTTPResponseToDataProvider","PostTitle","_ref","record","PostFilter","props","Filter","TextInput","label","source","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","PostList","List","assign","filters","posts_PostFilter","Responsive","small","SimpleList","primaryText","secondaryText","views","tertiaryText","Date","published_at","toLocaleDateString","medium","Datagrid","TextField","ReferenceField","EditButton","PostCreate","Create","SimpleForm","LongTextInput","PostEdit","Edit","posts_PostTitle","DisabledInput","withStyles","link","textDecoration","icon","width","paddingLeft","_ref$record","classes","href","classeName","Launch_default","UserList","rowClick","EmailField","src_MyUrlField","App","Admin","Resource","name","list","HomeIcon","UserIcon","edit","create","PostIcon","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87b25011.chunk.js","sourcesContent":["import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\nexport default (type, params) => {\n    // called when the user attempts to log in\n    if (type === AUTH_LOGIN) {\n        const { username } = params;\n        localStorage.setItem('username', username);\n        // accept all username/password combinations\n        return Promise.resolve();\n    }\n    if (type === AUTH_LOGOUT) {\n        localStorage.removeItem('username');\n        return Promise.resolve();\n    }\n    if (type === AUTH_ERROR) {\n        const { status } = params;\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('username');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    }\n    if (type === AUTH_CHECK) {\n        return localStorage.getItem('username')\n            ? Promise.resolve()\n            : Promise.reject();\n    }\n    return Promise.reject('Unknown method');\n};\n","import  React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\n\nexport default () => (\n    <Card>\n<CardHeader title =\" bienvenue dans l'administration\"/>\n<CardContent>c'est ici que tout commence </CardContent>\n    </Card>\n);","import {\n    GET_LIST,\n    GET_ONE,\n    GET_MANY,\n    GET_MANY_REFERENCE,\n    CREATE,\n    UPDATE,\n    DELETE,\n    fetchUtils,\n} from 'react-admin';\nimport { stringify } from 'query-string';\n\nconst API_URL = 'my.api.url';\n\n/**\n * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\n * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n * @param {Object} params The Data Provider request params, depending on the type\n * @returns {Object} { url, options } The HTTP request parameters\n */\nconst convertDataProviderRequestToHTTP = (type, resource, params) => {\n    switch (type) {\n    case GET_LIST: {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify(params.filter),\n        };\n        return { url: `${API_URL}/${resource}?${stringify(query)}` };\n    }\n    case GET_ONE:\n        return { url: `${API_URL}/${resource}/${params.id}` };\n    case GET_MANY: {\n        const query = {\n            filter: JSON.stringify({ id: params.ids }),\n        };\n        return { url: `${API_URL}/${resource}?${stringify(query)}` };\n    }\n    case GET_MANY_REFERENCE: {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, (page * perPage) - 1]),\n            filter: JSON.stringify({ ...params.filter, [params.target]: params.id }),\n        };\n        return { url: `${API_URL}/${resource}?${stringify(query)}` };\n    }\n    case UPDATE:\n        return {\n            url: `${API_URL}/${resource}/${params.id}`,\n            options: { method: 'PUT', body: JSON.stringify(params.data) },\n        };\n    case CREATE:\n        return {\n            url: `${API_URL}/${resource}`,\n            options: { method: 'POST', body: JSON.stringify(params.data) },\n        };\n    case DELETE:\n        return {\n            url: `${API_URL}/${resource}/${params.id}`,\n            options: { method: 'DELETE' },\n        };\n    default:\n        throw new Error(`Unsupported fetch action type ${type}`);\n    }\n};\n\n/**\n * @param {Object} response HTTP response from fetch()\n * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\n * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n * @param {Object} params The Data Provider request params, depending on the type\n * @returns {Object} Data Provider response\n */\nconst convertHTTPResponseToDataProvider = (response, type, resource, params) => {\n    const { headers, json } = response;\n    switch (type) {\n    case GET_LIST:\n        return {\n            data: json.map(x => x),\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\n        };\n    case CREATE:\n        return { data: { ...params.data, id: json.id } };\n    default:\n        return { data: json };\n    }\n};\n\n/**\n * @param {string} type Request type, e.g GET_LIST\n * @param {string} resource Resource name, e.g. \"posts\"\n * @param {Object} payload Request parameters. Depends on the request type\n * @returns {Promise} the Promise for response\n */\nexport default (type, resource, params) => {\n    const { fetchJson } = fetchUtils;\n    const { url, options } = convertDataProviderRequestToHTTP(type, resource, params);\n    return fetchJson(url, options)\n        .then(response => convertHTTPResponseToDataProvider(response, type, resource, params));\n};","import React from 'react';\nimport {Edit,List,Responsive, SimpleList,Create,Filter,SimpleForm,SelectInput,ReferenceInput,LongTextInput,TextInput,Datagrid,TextField,EditButton,ReferenceField,DisabledInput} from 'react-admin';\n\nconst PostTitle = ({ record }) => {\n       return <span>Post {record ? `\"${record.title}\"` : ''}</span>;\n    };\n\n    const PostFilter = (props) => (\n        <Filter {...props}>\n            <TextInput label=\"Search\" source=\"q\" alwaysOn />\n            <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\" allowEmpty>\n                <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n        </Filter>\n    );\n\n    export const PostList = props => (\n        <List {...props} filters={<PostFilter />}>\n\n            <Responsive\n            small={\n                <SimpleList\n                    primaryText={record => record.title}\n                    secondaryText={record => `${record.views} views`}\n                    tertiaryText={record => new Date(record.published_at).toLocaleDateString()}\n                />\n            }\n            medium={ \n            <Datagrid>\n              <TextField source=\"id\" />\n                <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n                    <TextField source=\"name\" />\n                </ReferenceField>\n                <TextField source=\"title\" />\n               <EditButton />\n            </Datagrid> \n            }\n            />\n        </List>\n    );\n\nexport const PostCreate = props => (\n    <Create {...props}>\n    <SimpleForm>\n        <ReferenceInput source=\"userId\" reference=\"users\">\n            <SelectInput optionText=\"name\" />\n        </ReferenceInput>\n        <TextInput source=\"title\" />\n        <LongTextInput source=\"body\" />\n    </SimpleForm>\n</Create>\n);\n\n\nexport const PostEdit = props => (\n    <Edit title={<PostTitle />} {...props}>\n        <SimpleForm>\n           <DisabledInput source=\"id\" />\n            <ReferenceInput source=\"userId\" reference=\"users\">\n               <SelectInput optionText=\"name\" />\n            </ReferenceInput>\n            <TextInput source=\"title\" />\n           <LongTextInput source=\"body\" />\n        </SimpleForm>\n    </Edit>\n);\n\n\n\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\n\n\nconst styles = {\n    link: {\n        textDecoration: 'none',\n    },\n    icon: {\n        width: '0.5em',\n        paddingLeft: 2,\n    },\n};\n\nconst MyUrlField = ({ record = {}, source, classes }) =>\n    <a href={record[source]} classeName={ classes.link }>\n        {record[source]}\n        <LaunchIcon classeName={classes.link}/>\n    </a>;\n\nexport default withStyles(styles)(MyUrlField);","import React from 'react';\nimport { List, Datagrid, TextField, EmailField } from 'react-admin';\nimport  MyUrlField  from  './MyUrlField';\nexport const UserList = props => (\n    <List {...props}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <EmailField source=\"email\" />\n            <TextField source=\"phone\" />\n            <MyUrlField source=\"website\" />\n            <TextField source=\"company.name\" />\n        </Datagrid>\n    </List>\n);","import React from 'react';\nimport { Admin, Resource} from 'react-admin'\nimport authProvider from \"./authProvider\";\nimport Dashboard from './Dashboard';\nimport dataProvider from './dataProvider';\nimport { PostList, PostEdit, PostCreate } from './posts';\nimport { UserList } from './users';\nimport PostIcon from '@material-ui/icons/Book';\nimport UserIcon from '@material-ui/icons/Group';\nimport HomeIcon from '@material-ui/icons/Home';\n\nconst App = () => ( <Admin dataProvider={dataProvider} authProvider={authProvider} Dashboard={Dashboard}>\n\n <Resource name=\"dashboard\" list={Dashboard} icon={HomeIcon}/>\n  <Resource name=\"users\" list={UserList} icon={UserIcon} />\n  <Resource name=\"posts\" list={PostList} edit={PostEdit} create={PostCreate} icon={PostIcon} />\n    </Admin>\n);\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}